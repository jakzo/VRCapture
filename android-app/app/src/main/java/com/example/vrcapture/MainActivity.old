package com.example.vrcapture
import androidx.appcompat.app.AppCompatActivity

import android.os.Bundle
import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.Toast
import androidx.camera.camera2.Camera2Config
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.util.concurrent.Executors
import androidx.activity.result.contract.ActivityResultContracts
import androidx.camera.core.*
import androidx.camera.core.impl.VideoCaptureConfig
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import com.google.common.util.concurrent.ListenableFuture
import kotlinx.android.synthetic.main.activity_main.*
import java.io.File
import java.nio.ByteBuffer
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.ExecutorService
typealias LumaListener = (luma: Double) -> Unit

class MainActivity : AppCompatActivity() {
    private lateinit var videoCapture: VideoCapture
    private lateinit var outputDirectory: File
    private var lensFacing: Int = CameraSelector.LENS_FACING_FRONT


    private val executor = Executors.newSingleThreadExecutor()
    private var camera: Camera? = null
    private lateinit var cameraProviderFuture: ListenableFuture<ProcessCameraProvider>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Request camera permissionsMainActivity.kt
        if (allPermissionsGranted()) {
            onPermissionGranted()
        } else {
            permissionRequest.launch(REQUIRED_PERMISSIONS)
        }

//        if (allPermissionsGranted()) {
//            Toast.makeText(applicationContext, "startCamera()", Toast.LENGTH_SHORT).show()
//            startCamera(baseContext)
//        } else {
//            Toast.makeText(applicationContext, "request perms", Toast.LENGTH_SHORT).show()
//            ActivityCompat.requestPermissions(
//                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS)
//        }

    }

    private val permissionRequest = registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
        if (permissions.all { it.value }) {
            onPermissionGranted()
        } else {
            Toast.makeText(applicationContext, "Permission not granted by user", Toast.LENGTH_SHORT).show()
        }
    }

    private fun onPermissionGranted() {
        startCamera(baseContext)
    }

    // ---

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

//    override fun onRequestPermissionsResult(
//        requestCode: Int, permissions: Array<String>, grantResults:
//        IntArray) {
//        if (requestCode == REQUEST_CODE_PERMISSIONS) {
//            if (allPermissionsGranted()) {
//                startCamera(baseContext)
//            } else {
//                Toast.makeText(this,
//                    "Permissions not granted by the user.",
//                    Toast.LENGTH_SHORT).show()
//                finish()
//            }
//        }
//    }

    @SuppressLint("RestrictedApi", "UnsafeExperimentalUsageError")
    private fun startCamera(context: Context) {
        outputDirectory = getOutputDirectory(context)
        cameraProviderFuture = ProcessCameraProvider.getInstance(context)

        val cameraSelector = CameraSelector.Builder().requireLensFacing(lensFacing).build()

        // Create a configuration object for the video use case
        val videoCaptureConfig = VideoCapture.Builder().apply {
            setTargetRotation(viewFinder.display.rotation)
            setCameraSelector(cameraSelector)
        }

        videoCapture = VideoCapture.Builder.fromConfig(videoCaptureConfig.useCaseConfig).build()

        val preview: Preview = Preview.Builder().apply {
            setTargetAspectRatio(AspectRatio.RATIO_16_9)
            setTargetRotation(viewFinder.display.rotation)
        }.build()
        preview.setSurfaceProvider(viewFinder.surfaceProvider)

        cameraProviderFuture.addListener(Runnable {
            val cameraProvider = cameraProviderFuture.get()
            camera = cameraProvider.bindToLifecycle(
                this,
                cameraSelector,
                preview,
                videoCapture
            )

        }, ContextCompat.getMainExecutor(context))
    }

    @SuppressLint("RestrictedApi")
    private fun startRecording() {
        val file = createFile(
            outputDirectory,
            FILENAME,
            VIDEO_EXTENSION
        )

        videoCapture.startRecording(
            VideoCapture.OutputFileOptions.Builder(file).build(),
            executor,
            object : VideoCapture.OnVideoSavedCallback {
                override fun onVideoSaved(outputFileResults: VideoCapture.OutputFileResults) {
                    Handler(Looper.getMainLooper()).post {
                        Toast.makeText(applicationContext, file.name + " is saved", Toast.LENGTH_SHORT).show()
                    }
                }

                override fun onError(videoCaptureError: Int, message: String, cause: Throwable?) {
                    Handler(Looper.getMainLooper()).post {
                        Toast.makeText(applicationContext, "$videoCaptureError $message", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        )
    }

    @SuppressLint("RestrictedApi")
    private fun stopRecording() {
        videoCapture.stopRecording()
    }

    companion object {
        private const val FILENAME = "yyyy_MM_dd_HH_mm_ss"
        private const val VIDEO_EXTENSION = ".mp4"

        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.CAMERA
        )
        private const val REQUEST_CODE_PERMISSIONS = 10

        fun getOutputDirectory(context: Context): File {
            val appContext = context.applicationContext
            val mediaDir = appContext.externalMediaDirs.firstOrNull()?.let {
                File(it, appContext.resources.getString(R.string.app_name)).apply { mkdirs() }
            }
            return if (mediaDir != null && mediaDir.exists()) mediaDir else appContext.filesDir
        }

        fun createFile(baseFolder: File, format: String, extension: String) =
                File(baseFolder, SimpleDateFormat(format, Locale.US)
                        .format(System.currentTimeMillis()) + extension)
    }
}